From d9da3ec088a3442fc2d73cb5a8d95c2edd105bc4 Mon Sep 17 00:00:00 2001
From: "Dr. Stephen Henson" <steve@openssl.org>
Date: Fri, 1 Aug 2014 14:56:56 +0100
Subject: [PATCH 14/16] Check SRP parameters early.

Check SRP parameters when they are received so we can send back an
appropriate alert.
Reviewed-by: Kurt Roeckx <kurt@openssl.org>
---
 ssl/s3_clnt.c  |  6 ++++++
 ssl/s3_srvr.c  |  7 +++++++
 ssl/ssl.h      |  1 +
 ssl/ssl_err.c  |  1 +
 ssl/ssl_locl.h |  3 +++
 ssl/tls_srp.c  | 48 +++++++++++++++++++++++++++++++++++++-----------
 6 files changed, 55 insertions(+), 11 deletions(-)

Index: openssl-1.0.1e/ssl/s3_clnt.c
===================================================================
--- openssl-1.0.1e.orig/ssl/s3_clnt.c	2014-08-06 18:43:44.000000000 +0000
+++ openssl-1.0.1e/ssl/s3_clnt.c	2014-08-06 18:43:56.805003347 +0000
@@ -1470,6 +1470,12 @@
 		p+=i;
 		n-=param_len;
 
+		if (!srp_verify_server_param(s, &al))
+			{
+			SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,SSL_R_BAD_SRP_PARAMETERS);
+			goto f_err;
+			}
+
 /* We must check if there is a certificate */
 #ifndef OPENSSL_NO_RSA
 		if (alg_a & SSL_aRSA)
Index: openssl-1.0.1e/ssl/s3_srvr.c
===================================================================
--- openssl-1.0.1e.orig/ssl/s3_srvr.c	2014-08-06 18:41:01.000000000 +0000
+++ openssl-1.0.1e/ssl/s3_srvr.c	2014-08-06 18:43:56.889001598 +0000
@@ -2799,6 +2799,13 @@
 				SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,ERR_R_BN_LIB);
 				goto err;
 				}
+			if (BN_ucmp(s->srp_ctx.A, s->srp_ctx.N) >= 0
+				|| BN_is_zero(s->srp_ctx.A))
+				{
+				al=SSL_AD_ILLEGAL_PARAMETER;
+				SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,SSL_R_BAD_SRP_PARAMETERS);
+				goto f_err;
+				}
 			if (s->session->srp_username != NULL)
 				OPENSSL_free(s->session->srp_username);
 			s->session->srp_username = BUF_strdup(s->srp_ctx.login);
Index: openssl-1.0.1e/ssl/ssl.h
===================================================================
--- openssl-1.0.1e.orig/ssl/ssl.h	2014-08-06 18:43:44.000000000 +0000
+++ openssl-1.0.1e/ssl/ssl.h	2014-08-06 18:43:56.893001514 +0000
@@ -2313,6 +2313,7 @@
 #define SSL_R_BAD_SRP_B_LENGTH				 348
 #define SSL_R_BAD_SRP_G_LENGTH				 349
 #define SSL_R_BAD_SRP_N_LENGTH				 350
+#define SSL_R_BAD_SRP_PARAMETERS			 371
 #define SSL_R_BAD_SRP_S_LENGTH				 351
 #define SSL_R_BAD_SRTP_MKI_VALUE			 352
 #define SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST		 353
Index: openssl-1.0.1e/ssl/ssl_err.c
===================================================================
--- openssl-1.0.1e.orig/ssl/ssl_err.c	2013-02-11 15:26:04.000000000 +0000
+++ openssl-1.0.1e/ssl/ssl_err.c	2014-08-06 18:43:56.893001514 +0000
@@ -329,6 +329,7 @@
 {ERR_REASON(SSL_R_BAD_SRP_B_LENGTH)      ,"bad srp b length"},
 {ERR_REASON(SSL_R_BAD_SRP_G_LENGTH)      ,"bad srp g length"},
 {ERR_REASON(SSL_R_BAD_SRP_N_LENGTH)      ,"bad srp n length"},
+{ERR_REASON(SSL_R_BAD_SRP_PARAMETERS)    ,"bad srp parameters"},
 {ERR_REASON(SSL_R_BAD_SRP_S_LENGTH)      ,"bad srp s length"},
 {ERR_REASON(SSL_R_BAD_SRTP_MKI_VALUE)    ,"bad srtp mki value"},
 {ERR_REASON(SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST),"bad srtp protection profile list"},
Index: openssl-1.0.1e/ssl/ssl_locl.h
===================================================================
--- openssl-1.0.1e.orig/ssl/ssl_locl.h	2014-08-06 18:43:44.000000000 +0000
+++ openssl-1.0.1e/ssl/ssl_locl.h	2014-08-06 18:44:41.368075207 +0000
@@ -1174,4 +1174,6 @@
 	const EVP_CIPHER_CTX *cipher_ctx, EVP_MD_CTX *mac_ctx,
 	const unsigned char *data, size_t data_len, size_t orig_len);
 
+int srp_verify_server_param(SSL *s, int *al);
+
 #endif
Index: openssl-1.0.1e/ssl/tls_srp.c
===================================================================
--- openssl-1.0.1e.orig/ssl/tls_srp.c	2013-02-11 15:26:04.000000000 +0000
+++ openssl-1.0.1e/ssl/tls_srp.c	2014-08-06 18:43:56.893001514 +0000
@@ -408,16 +408,46 @@
 	return ret;
 	}
 
-int SRP_Calc_A_param(SSL *s)
+int srp_verify_server_param(SSL *s, int *al)
 	{
-	unsigned char rnd[SSL_MAX_MASTER_KEY_LENGTH];
+	SRP_CTX *srp = &s->srp_ctx;
+	/* Sanity check parameters: we can quickly check B % N == 0
+	 * by checking B != 0 since B < N
+	 */
+	if (BN_ucmp(srp->g, srp->N) >=0 || BN_ucmp(srp->B, srp->N) >= 0
+		|| BN_is_zero(srp->B))
+		{
+		*al = SSL3_AD_ILLEGAL_PARAMETER;
+		return 0;
+		}
+
+	if (BN_num_bits(srp->N) < srp->strength)
+		{
+		*al = TLS1_AD_INSUFFICIENT_SECURITY;
+		return 0;
+		}
+
+	if (srp->SRP_verify_param_callback)
+		{
+		if (srp->SRP_verify_param_callback(s, srp->SRP_cb_arg) <= 0)
+			{
+			*al = TLS1_AD_INSUFFICIENT_SECURITY;
+			return 0;
+			}
+		}
+	else if(!SRP_check_known_gN_param(srp->g, srp->N))
+		{
+		*al = TLS1_AD_INSUFFICIENT_SECURITY;
+		return 0;
+		}
 
-	if (BN_num_bits(s->srp_ctx.N) < s->srp_ctx.strength)
-		return -1;
+	return 1;
+	}
+	
 
-	if (s->srp_ctx.SRP_verify_param_callback ==NULL && 
-		!SRP_check_known_gN_param(s->srp_ctx.g,s->srp_ctx.N))
-		return -1 ;
+int SRP_Calc_A_param(SSL *s)
+	{
+	unsigned char rnd[SSL_MAX_MASTER_KEY_LENGTH];
 
 	RAND_bytes(rnd, sizeof(rnd));
 	s->srp_ctx.a = BN_bin2bn(rnd, sizeof(rnd), s->srp_ctx.a);
@@ -426,10 +456,6 @@
 	if (!(s->srp_ctx.A = SRP_Calc_A(s->srp_ctx.a,s->srp_ctx.N,s->srp_ctx.g)))
 		return -1;
 
-	/* We can have a callback to verify SRP param!! */
-	if (s->srp_ctx.SRP_verify_param_callback !=NULL) 
-		return s->srp_ctx.SRP_verify_param_callback(s,s->srp_ctx.SRP_cb_arg);
-
 	return 1;
 	}
 
